# DeepBlue 2.0 Ultimate 100/100 Kubernetes Deployment
# Latest technology stack with maximum performance

apiVersion: v1
kind: Namespace
metadata:
  name: deepblue-ultimate-100
  labels:
    name: deepblue-ultimate-100
    version: "2.0.0"
    technology: "100/100"

---
# ConfigMap for environment variables
apiVersion: v1
kind: ConfigMap
metadata:
  name: deepblue-config
  namespace: deepblue-ultimate-100
data:
  NODE_ENV: "production"
  PYTHON_ENV: "production"
  LOG_LEVEL: "INFO"
  MAX_WORKERS: "10"
  WORKER_TIMEOUT: "300"
  KEEP_ALIVE: "5"
  MAX_REQUESTS: "1000"
  MAX_REQUESTS_JITTER: "100"
  PRELOAD_APP: "true"
  WORKER_CLASS: "uvicorn.workers.UvicornWorker"
  WORKER_CONNECTIONS: "1000"
  WORKER_TMP_DIR: "/dev/shm"
  WORKER_GRACEFUL_TIMEOUT: "120"
  WORKER_MAX_REQUESTS_JITTER: "100"
  WORKER_PRELOAD_APP: "true"
  WORKER_RELOAD: "false"
  WORKER_ACCESS_LOG: "true"
  WORKER_ACCESS_LOG_FORMAT: "%(h)s %(l)s %(u)s %(t)s \"%(r)s\" %(s)s %(b)s \"%(f)s\" \"%(a)s\""
  WORKER_ERROR_LOG: "true"
  WORKER_LOG_LEVEL: "info"
  WORKER_LOG_CONFIG: "logging.conf"
  WORKER_ENABLE_PROXY_PROTOCOL: "false"
  WORKER_PROXY_PROTOCOL_HEADER: "X-Forwarded-For"
  WORKER_PROXY_PROTOCOL_HEADER_PORT: "X-Forwarded-Port"
  WORKER_PROXY_PROTOCOL_HEADER_PROTO: "X-Forwarded-Proto"
  WORKER_PROXY_PROTOCOL_HEADER_HOST: "X-Forwarded-Host"
  WORKER_PROXY_PROTOCOL_HEADER_FOR: "X-Forwarded-For"
  WORKER_PROXY_PROTOCOL_HEADER_PORT: "X-Forwarded-Port"
  WORKER_PROXY_PROTOCOL_HEADER_PROTO: "X-Forwarded-Proto"
  WORKER_PROXY_PROTOCOL_HEADER_HOST: "X-Forwarded-Host"

---
# Secret for sensitive data
apiVersion: v1
kind: Secret
metadata:
  name: deepblue-secrets
  namespace: deepblue-ultimate-100
type: Opaque
data:
  # Base64 encoded secrets
  OPENAI_API_KEY: ""  # Add your OpenAI API key
  ANTHROPIC_API_KEY: ""  # Add your Anthropic API key
  GOOGLE_API_KEY: ""  # Add your Google API key
  DATABASE_URL: ""  # Add your database URL
  REDIS_URL: ""  # Add your Redis URL
  JWT_SECRET: ""  # Add your JWT secret
  ENCRYPTION_KEY: ""  # Add your encryption key

---
# Persistent Volume Claim for data
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: deepblue-data-pvc
  namespace: deepblue-ultimate-100
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Gi
  storageClassName: fast-ssd

---
# Backend Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: deepblue-backend
  namespace: deepblue-ultimate-100
  labels:
    app: deepblue-backend
    version: "2.0.0"
    technology: "100/100"
spec:
  replicas: 5
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 2
  selector:
    matchLabels:
      app: deepblue-backend
  template:
    metadata:
      labels:
        app: deepblue-backend
        version: "2.0.0"
        technology: "100/100"
    spec:
      containers:
      - name: deepblue-backend
        image: deepblue2/ultimate-100:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8000
          name: http
          protocol: TCP
        - containerPort: 8001
          name: metrics
          protocol: TCP
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        envFrom:
        - configMapRef:
            name: deepblue-config
        - secretRef:
            name: deepblue-secrets
        resources:
          requests:
            memory: "2Gi"
            cpu: "1000m"
            ephemeral-storage: "1Gi"
          limits:
            memory: "8Gi"
            cpu: "4000m"
            ephemeral-storage: "10Gi"
        volumeMounts:
        - name: data-volume
          mountPath: /app/data
        - name: logs-volume
          mountPath: /app/logs
        - name: cache-volume
          mountPath: /app/cache
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: 8000
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /startup
            port: 8000
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 10
      volumes:
      - name: data-volume
        persistentVolumeClaim:
          claimName: deepblue-data-pvc
      - name: logs-volume
        emptyDir: {}
      - name: cache-volume
        emptyDir: {}

---
# Frontend Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: deepblue-frontend
  namespace: deepblue-ultimate-100
  labels:
    app: deepblue-frontend
    version: "2.0.0"
    technology: "100/100"
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 2
  selector:
    matchLabels:
      app: deepblue-frontend
  template:
    metadata:
      labels:
        app: deepblue-frontend
        version: "2.0.0"
        technology: "100/100"
    spec:
      containers:
      - name: deepblue-frontend
        image: deepblue2/ultimate-100:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 3000
          name: http
          protocol: TCP
        env:
        - name: NODE_ENV
          value: "production"
        - name: REACT_APP_API_URL
          value: "http://deepblue-backend:8000"
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /
            port: 3000
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3

---
# Backend Service
apiVersion: v1
kind: Service
metadata:
  name: deepblue-backend-service
  namespace: deepblue-ultimate-100
  labels:
    app: deepblue-backend
    version: "2.0.0"
    technology: "100/100"
spec:
  type: ClusterIP
  ports:
  - port: 8000
    targetPort: 8000
    protocol: TCP
    name: http
  - port: 8001
    targetPort: 8001
    protocol: TCP
    name: metrics
  selector:
    app: deepblue-backend

---
# Frontend Service
apiVersion: v1
kind: Service
metadata:
  name: deepblue-frontend-service
  namespace: deepblue-ultimate-100
  labels:
    app: deepblue-frontend
    version: "2.0.0"
    technology: "100/100"
spec:
  type: ClusterIP
  ports:
  - port: 3000
    targetPort: 3000
    protocol: TCP
    name: http
  selector:
    app: deepblue-frontend

---
# Ingress
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: deepblue-ingress
  namespace: deepblue-ultimate-100
  labels:
    app: deepblue
    version: "2.0.0"
    technology: "100/100"
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "100m"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "600"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "600"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "600"
    nginx.ingress.kubernetes.io/proxy-buffer-size: "16k"
    nginx.ingress.kubernetes.io/proxy-buffers-number: "8"
    nginx.ingress.kubernetes.io/proxy-busy-buffers-size: "16k"
    nginx.ingress.kubernetes.io/proxy-temp-file-write-size: "16k"
    nginx.ingress.kubernetes.io/upstream-hash-by: "$binary_remote_addr"
    nginx.ingress.kubernetes.io/load-balance: "round_robin"
    nginx.ingress.kubernetes.io/ssl-protocols: "TLSv1.2 TLSv1.3"
    nginx.ingress.kubernetes.io/ssl-ciphers: "ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384"
    nginx.ingress.kubernetes.io/ssl-prefer-server-ciphers: "true"
    nginx.ingress.kubernetes.io/ssl-session-cache: "shared:SSL:10m"
    nginx.ingress.kubernetes.io/ssl-session-timeout: "10m"
    nginx.ingress.kubernetes.io/ssl-session-tickets: "off"
    nginx.ingress.kubernetes.io/ssl-buffer-size: "8k"
    nginx.ingress.kubernetes.io/ssl-verify-client: "off"
    nginx.ingress.kubernetes.io/ssl-verify-depth: "1"
    nginx.ingress.kubernetes.io/ssl-client-certificate: ""
    nginx.ingress.kubernetes.io/ssl-crl: ""
    nginx.ingress.kubernetes.io/ssl-dh-param: ""
    nginx.ingress.kubernetes.io/ssl-ecdh-curve: "secp384r1"
    nginx.ingress.kubernetes.io/ssl-protocols: "TLSv1.2 TLSv1.3"
    nginx.ingress.kubernetes.io/ssl-ciphers: "ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384"
    nginx.ingress.kubernetes.io/ssl-prefer-server-ciphers: "true"
    nginx.ingress.kubernetes.io/ssl-session-cache: "shared:SSL:10m"
    nginx.ingress.kubernetes.io/ssl-session-timeout: "10m"
    nginx.ingress.kubernetes.io/ssl-session-tickets: "off"
    nginx.ingress.kubernetes.io/ssl-buffer-size: "8k"
    nginx.ingress.kubernetes.io/ssl-verify-client: "off"
    nginx.ingress.kubernetes.io/ssl-verify-depth: "1"
    nginx.ingress.kubernetes.io/ssl-client-certificate: ""
    nginx.ingress.kubernetes.io/ssl-crl: ""
    nginx.ingress.kubernetes.io/ssl-dh-param: ""
    nginx.ingress.kubernetes.io/ssl-ecdh-curve: "secp384r1"
spec:
  tls:
  - hosts:
    - deepblue.example.com
    secretName: deepblue-tls
  rules:
  - host: deepblue.example.com
    http:
      paths:
      - path: /api
        pathType: Prefix
        backend:
          service:
            name: deepblue-backend-service
            port:
              number: 8000
      - path: /
        pathType: Prefix
        backend:
          service:
            name: deepblue-frontend-service
            port:
              number: 3000

---
# Horizontal Pod Autoscaler for Backend
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: deepblue-backend-hpa
  namespace: deepblue-ultimate-100
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: deepblue-backend
  minReplicas: 3
  maxReplicas: 20
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 15
      - type: Pods
        value: 4
        periodSeconds: 15
      selectPolicy: Max
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
      selectPolicy: Min

---
# Horizontal Pod Autoscaler for Frontend
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: deepblue-frontend-hpa
  namespace: deepblue-ultimate-100
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: deepblue-frontend
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 15
      - type: Pods
        value: 2
        periodSeconds: 15
      selectPolicy: Max
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
      selectPolicy: Min

---
# Pod Disruption Budget for Backend
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: deepblue-backend-pdb
  namespace: deepblue-ultimate-100
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: deepblue-backend

---
# Pod Disruption Budget for Frontend
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: deepblue-frontend-pdb
  namespace: deepblue-ultimate-100
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: deepblue-frontend

---
# Network Policy
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: deepblue-network-policy
  namespace: deepblue-ultimate-100
spec:
  podSelector:
    matchLabels:
      app: deepblue-backend
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: deepblue-ultimate-100
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    ports:
    - protocol: TCP
      port: 8000
    - protocol: TCP
      port: 8001
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          name: deepblue-ultimate-100
    ports:
    - protocol: TCP
      port: 8000
    - protocol: TCP
      port: 8001
  - to: []
    ports:
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 80
    - protocol: TCP
      port: 53
    - protocol: UDP
      port: 53

