version: '3.8'

services:
  # DeepBlue 2.0 API
  deepblue2-api:
    build: .
    container_name: deepblue2-api
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=production
      - POSTGRES_URL=postgresql://deepblue:deepblue@postgres:5432/deepblue2
      - REDIS_URL=redis://redis:6379/0
      - MONGODB_URL=mongodb://mongodb:27017/deepblue2
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - PINECONE_API_KEY=${PINECONE_API_KEY}
      - SENTRY_DSN=${SENTRY_DSN}
    depends_on:
      - postgres
      - redis
      - mongodb
      - chroma
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
    restart: unless-stopped
    networks:
      - deepblue2-network

  # Frontend (if running separately)
  deepblue2-frontend:
    build: .
    container_name: deepblue2-frontend
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - REACT_APP_API_URL=http://localhost:8000
    command: ["npm", "run", "preview"]
    depends_on:
      - deepblue2-api
    restart: unless-stopped
    networks:
      - deepblue2-network

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: deepblue2-postgres
    environment:
      - POSTGRES_DB=deepblue2
      - POSTGRES_USER=deepblue
      - POSTGRES_PASSWORD=deepblue
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - deepblue2-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: deepblue2-redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    restart: unless-stopped
    networks:
      - deepblue2-network

  # MongoDB
  mongodb:
    image: mongo:7
    container_name: deepblue2-mongodb
    environment:
      - MONGO_INITDB_ROOT_USERNAME=deepblue
      - MONGO_INITDB_ROOT_PASSWORD=deepblue
      - MONGO_INITDB_DATABASE=deepblue2
    volumes:
      - mongodb_data:/data/db
    ports:
      - "27017:27017"
    restart: unless-stopped
    networks:
      - deepblue2-network

  # Chroma Vector Database
  chroma:
    image: chromadb/chroma:latest
    container_name: deepblue2-chroma
    environment:
      - CHROMA_SERVER_HOST=0.0.0.0
      - CHROMA_SERVER_HTTP_PORT=8001
    volumes:
      - chroma_data:/chroma/chroma
    ports:
      - "8001:8001"
    restart: unless-stopped
    networks:
      - deepblue2-network

  # Qdrant Vector Database (alternative)
  qdrant:
    image: qdrant/qdrant:latest
    container_name: deepblue2-qdrant
    volumes:
      - qdrant_data:/qdrant/storage
    ports:
      - "6333:6333"
    restart: unless-stopped
    networks:
      - deepblue2-network

  # Weaviate Vector Database (alternative)
  weaviate:
    image: semitechnologies/weaviate:latest
    container_name: deepblue2-weaviate
    environment:
      - QUERY_DEFAULTS_LIMIT=25
      - AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED=true
      - PERSISTENCE_DATA_PATH=/var/lib/weaviate
      - DEFAULT_VECTORIZER_MODULE=none
      - CLUSTER_HOSTNAME=node1
    volumes:
      - weaviate_data:/var/lib/weaviate
    ports:
      - "8080:8080"
    restart: unless-stopped
    networks:
      - deepblue2-network

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: deepblue2-prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - deepblue2-network

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: deepblue2-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=deepblue2
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    ports:
      - "3001:3000"
    restart: unless-stopped
    networks:
      - deepblue2-network

  # Elasticsearch (for logging)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: deepblue2-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    restart: unless-stopped
    networks:
      - deepblue2-network

  # Kibana (for log visualization)
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: deepblue2-kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    restart: unless-stopped
    networks:
      - deepblue2-network

  # Nginx Load Balancer
  nginx:
    image: nginx:alpine
    container_name: deepblue2-nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - deepblue2-api
      - deepblue2-frontend
    restart: unless-stopped
    networks:
      - deepblue2-network

volumes:
  postgres_data:
  redis_data:
  mongodb_data:
  chroma_data:
  qdrant_data:
  weaviate_data:
  prometheus_data:
  grafana_data:
  elasticsearch_data:

networks:
  deepblue2-network:
    driver: bridge

